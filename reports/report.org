#+TITLE: CNF-SAT reduction graph coloring
#+AUTHOR: Kyle Dixler
#+OPTIONS: toc:nil
* SAT Reduction
    I have the SAT reduction attempting to assign colors to a graph given a number of colors available to use.
    I check if it is possible to color the graph with 1 color, then 2, and so on until a satisfying truth assignment
    is found and then we know the optimal number of colors.
    
    There are 2 main rules that we encode using CNF SAT, we have each node in the graph 1 Hot Encoded for every color.
    We then create a series of clauses that make it so that only 1 color can be true at a time per node, we also have
    it so that if there is an edge between a node they cannot share the same color.
* Benchmarks
** 1 second
    given 1 seconds of computation and a graph of 53 nodes with a 20% chance of an edge appearing, the SAT solver was able to solve this instance
    #+BEGIN_SRC shell
    {"0": [4, 8, 12, 24, 30, 41, 43, 46, 47], "1": [3, 12, 14, 20, 22, 23, 24, 27, 29, 30, 32, 34, 38, 40, 42, 51, 52], "2": [3, 11, 23, 30, 34, 39, 47, 50], "3": [2, 4, 9, 11, 12, 18, 25, 26, 39, 45, 48, 49, 50, 51], "4": [1, 14, 26, 27, 31, 42, 47, 51], "5": [15, 18, 31, 45], "6": [2, 24, 26, 32, 37, 38, 52], "7": [1, 4, 8, 9, 15, 16, 20, 26, 27, 32, 37, 38, 42, 45, 48], "8": [10, 12, 13, 15, 17, 25, 26, 31, 37, 43, 45, 48], "9": [2, 21, 29, 33, 34, 41, 42, 44, 48, 49], "10": [3, 5, 30, 36, 46], "11": [0, 2, 5, 6, 18, 19, 22, 28, 34, 36, 41, 43, 48, 49, 52], "12": [1, 6, 7, 8, 18, 21, 28, 31, 33, 50, 52], "13": [3, 6, 14, 17, 19, 26, 27, 40, 47, 52], "14": [12, 13, 22, 23, 32, 37, 42, 43, 44, 47], "15": [4, 6, 22, 24, 26, 37, 49], "16": [8, 17, 20, 25, 41, 42, 47, 50], "17": [0, 3, 9, 15, 23, 24, 34, 45, 47, 52], "18": [0, 8, 13, 17, 23, 33, 36, 43], "19": [1, 3, 4, 9, 11, 13, 15, 23, 24, 32, 37], "20": [4, 9, 14, 24, 25, 45, 47, 49, 51], "21": [0, 10, 12, 16, 22, 26, 27, 29, 31, 42, 44, 50], "22": [0, 1, 6, 11, 13, 18, 20, 33, 34, 42, 44, 45, 46, 51, 52], "23": [1, 2, 6, 10, 20, 25, 27, 31, 42, 47], "24": [0, 8, 10, 14, 15, 32, 36, 39, 43, 48], "25": [3, 4, 5, 27, 41, 46, 50], "26": [3, 6, 8, 9, 13, 21, 35, 36, 37, 39, 45, 51], "27": [7, 14, 21, 37, 42, 52], "28": [8, 10, 12, 19, 22, 23, 44, 48, 50], "29": [4, 18, 19, 21, 24, 26, 46], "30": [4, 6, 17, 26, 32, 36, 48, 49], "31": [10, 13, 19, 25, 29, 30, 32, 33, 35, 41, 43, 49, 52], "32": [3, 8, 11, 42, 45, 48, 50], "33": [1, 4, 7, 20, 23, 30, 31, 32, 37, 45, 50], "34": [0, 7, 12, 13, 20, 21, 29, 30, 33, 36, 39, 40, 42, 51, 52], "35": [0, 2, 4, 7, 18, 19, 22, 23, 29, 32, 46, 51], "36": [9, 10, 15, 27, 31, 44, 45, 46, 50], "37": [0, 6, 7, 9, 15, 22, 26, 27, 30, 32, 38, 46], "38": [3, 4, 16, 19, 25, 26, 27, 34, 36, 42], "39": [3, 15, 18, 23, 25, 28, 29, 34, 36, 45, 46], "40": [8, 9, 10, 18, 22, 23, 33, 45, 47, 52], "41": [0, 2, 6, 7, 9, 10, 15, 16, 17, 20, 21, 23, 27, 32, 38, 44, 46, 47], "42": [1, 2, 9, 13, 18, 26, 33, 38, 40, 43, 44, 47], "43": [2, 5, 9, 11, 22, 24, 26, 33, 39, 40, 50], "44": [0, 3, 5, 6, 20, 23, 24, 29, 37], "45": [4, 7, 8, 20, 27, 29, 42, 48, 52], "46": [8, 24, 50], "47": [0, 2, 5, 6, 8, 16, 18, 25, 31, 37, 41, 42, 46, 51], "48": [1, 5, 6, 8, 9, 22, 32, 52], "49": [10, 14, 17, 18, 20, 47], "50": [4, 8, 10, 12, 18, 22, 26, 27, 30, 33, 39], "51": [13, 19, 28, 34, 38], "52": [4, 10, 16, 17, 23, 35, 36, 38]}
    satisfiable with 7 colors
    (0, 0), (2, 0), (3, 0), (3, 4), (4, 1), (5, 1), (6, 4), (7, 5), (8, 4), (9, 1), (11, 0), (11, 6), (12, 1), (14, 0), (14, 4), (16, 0), (16, 1), (17, 6), (18, 2), (19, 5), (20, 6), (21, 4), (22, 1), (23, 1), (24, 1), (26, 0), (26, 2), (27, 2), (28, 2), (29, 3), (30, 5), (31, 6), (32, 2), (33, 4), (34, 2), (35, 4), (36, 4), (37, 3), (38, 6), (39, 6), (40, 6), (41, 3), (42, 3), (43, 5), (44, 5), (46, 0), (46, 2), (47, 5), (48, 3), (49, 3), (50, 3), (51, 3), (52, 5),
    real	0m0.655s
    user	0m0.608s
    sys	0m0.046s
    #+END_SRC
** 10 seconds
    given 10 seconds of computation and a graph of 52 nodes with a 20% chance of an edge appearing, the SAT solver was able to solve this instance
    #+BEGIN_SRC shell
    {"0": [1, 7, 11, 14, 17, 35, 39], "1": [9, 11, 12, 16, 28, 38, 40, 45], "2": [1, 5, 12, 13, 19, 30, 43, 44, 46, 47, 50], "3": [1, 6, 18, 29, 34, 41, 46, 47, 52], "4": [5, 6, 12, 14, 15, 19, 21, 28, 32, 40], "5": [1, 7, 12, 13, 15, 24, 36, 39, 49, 52], "6": [3, 14, 15, 19, 27, 34, 36, 40, 51], "7": [9, 16, 19, 20, 22, 23, 32, 36, 38, 50], "8": [5, 11, 12, 17, 20, 27, 28, 33, 43, 46], "9": [0, 5, 13, 14, 25, 28, 30, 34, 40, 41, 51], "10": [2, 6, 17, 20, 22, 24, 30, 43, 44, 46], "11": [2, 5, 15, 17, 19, 21, 22, 23, 27, 34, 47, 48], "12": [1, 2, 4, 7, 9, 11, 20, 21, 22, 28, 32, 36, 37, 38, 45], "13": [5, 14, 20, 21, 22, 26, 30, 31, 34, 36, 46, 47, 48, 50], "14": [10, 11, 17, 18, 20, 28, 32, 37, 51], "15": [1, 6, 10, 12, 22, 24, 29, 37, 40, 46, 52, 53], "16": [0, 7, 12, 30, 31, 36, 37, 44], "17": [0, 3, 4, 6, 21, 35, 38, 39, 45, 48], "18": [4, 9, 24, 28, 29, 30, 36, 39, 50, 51], "19": [0, 3, 20, 21, 30, 44, 45], "20": [6, 7, 8, 11, 17, 24, 25, 26, 29, 34, 49], "21": [12, 16, 22, 23, 29, 40, 46, 48, 52], "22": [3, 5, 6, 14, 17, 28, 29, 30, 32, 41, 42, 43, 47, 49], "23": [2, 10, 22, 26, 27, 39, 44], "24": [5, 8, 11, 13, 20, 21, 25, 26, 28, 31, 44, 52], "25": [0, 2, 3, 30, 31, 33, 40, 43, 48], "26": [0, 9, 16, 20, 21, 24, 28, 30, 32, 37, 38, 40, 44, 45], "27": [1, 7, 21, 24, 35, 39, 49], "28": [2, 7, 24, 25, 27, 32, 47], "29": [0, 8, 9, 33, 43, 45, 48, 51], "30": [10, 13, 15, 37, 43, 45, 46], "31": [0, 9, 10, 15, 18, 19, 28, 30, 32, 40, 42, 44, 45, 46, 49, 51], "32": [11, 20, 22, 28, 30, 37, 39, 49, 50, 52], "33": [6, 11, 13, 16, 19, 20, 24, 25, 28, 29, 36, 38, 43, 53], "34": [8, 15, 19, 31, 33, 38, 39, 43, 51], "35": [14, 18, 21, 27, 30, 31, 36, 40, 44, 45, 52], "36": [1, 5, 12, 15, 28, 42, 43, 52], "37": [3, 5, 6, 9, 13, 14, 29, 41, 44, 49], "38": [1, 13, 14, 31, 43, 46], "39": [6, 11, 12, 15, 18, 29, 32, 49], "40": [2, 4, 10, 15, 21, 32, 35, 38, 39, 44, 47, 48, 50], "41": [3, 6, 8, 10, 13, 15, 16, 21, 23, 25], "42": [0, 7, 24, 35, 36, 37, 39, 40, 44, 47], "43": [8, 10, 14, 24, 37, 38, 41, 45, 49], "44": [7, 13, 24, 27, 33, 34, 37, 38, 47], "45": [3, 5, 17, 21, 22, 24, 35, 46, 52], "46": [13, 14, 18, 19, 21, 24, 26, 27, 28, 30, 31, 32, 37, 42, 49, 53], "47": [7, 13, 15, 17, 23, 25, 27, 39, 43], "48": [6, 7, 10, 14, 21, 23, 25, 32, 35, 38, 50], "49": [3, 4, 9, 12, 21, 22, 31, 32, 37, 38, 41, 46, 47, 50, 51], "50": [0, 2, 3, 4, 15, 16, 28, 30, 38, 41, 43, 52], "51": [9, 15, 23, 27, 33, 34, 44, 46, 47, 49, 50], "52": [4, 5, 9, 22, 26, 28, 44, 48, 53], "53": [7, 10, 12, 20, 21, 23, 28, 31, 37, 50, 51]}
    satisfiable with 7 colors
    (0, 4), (1, 3), (2, 1), (3, 4), (4, 1), (6, 0), (6, 6), (7, 2), (8, 1), (9, 6), (10, 3), (11, 2), (12, 5), (13, 2), (15, 0), (15, 4), (16, 6), (17, 5), (18, 2), (19, 3), (20, 4), (21, 4), (22, 1), (23, 5), (24, 6), (25, 3), (26, 1), (28, 0), (28, 4), (30, 0), (31, 0), (31, 1), (32, 6), (33, 5), (35, 0), (35, 6), (36, 1), (37, 3), (38, 6), (39, 1), (40, 2), (42, 0), (43, 0), (43, 4), (44, 4), (45, 2), (46, 5), (47, 6), (48, 1), (49, 2), (50, 5), (51, 3), (52, 3), (54, 0), 
    real	0m7.007s
    user	0m6.868s
    sys	0m0.101s
    #+END_SRC
* Heuristic Approach
** Strategy
    I used the a simple heuristic approach detailed in the introduction of "Efficiency issues in the RLF heuristic for graph coloring"
    by Marco Chiarandini , Giulia Galbiati , and Stefano Gualandi. The approach essentially states pick a node and color it the 
    lowest available color. I added bias by selecting the most connected nodes to start from, assigned them the lowest available color
    and then recursed onto the neighbors. I then checked for nodes that were untouched and then started again from the most connected one
    until there are no remaining unvisited nodes.
** Results 
*** 10 Nodes 50% chance of an edge
**** Colors used
      [[./t1_color.pdf]]
**** Execution time used
      [[./t1_time.pdf]]
*** 20 Nodes 20% chance of an edge
**** Colors used
      [[./t2_color.pdf]]
**** Execution time used
      [[./t2_time.pdf]]
** Conclusion
    The heuristic approach was able to get solutions that were less than or equal to the number of colors in the graph. Generally, it performed 
    within 2x worse than the optimal solution for the small problem sizes. With 20 nodes 20% Edge Probability, it took 1 extra color most of the time.
    
